<!DOCTYPE html>
<html>

<head>
  <title>Leaflet GeoJSON Example</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-polylinedecorator"></script> <!-- Add this line for PolylineDecorator -->
  <style>
    .custom-icon {
      width: 30px;
      height: 30px;
      background: transparent;
      transform-origin: center;
    }
  </style>
</head>

<body>
  <div id="map" style="width: 100%; height: 900px;"></div>
  <script>
    // Add GeoJSON data to the map
    var shapeCar = <%- JSON.stringify(shapeCar) %>;
    var startCoordinates = <%- JSON.stringify(startCoordinates) %>;
    var goalCoordinates = <%- JSON.stringify(goalCoordinates) %>;
    var coordinatesList = <%- JSON.stringify(coordinatesList) %>;

    // Add start and stop icons
    var startIcon = L.icon({
      iconUrl: '/img/start.png',
      iconSize: [64, 64],
      iconAnchor: [32, 32],
      className: 'custom-start-icon'
    });

    var stopIcon = L.icon({
      iconUrl: '/img/goal.png',
      iconSize: [64, 64],
      iconAnchor: [32, 32],
      className: 'custom-stop-icon'
    });

    var midpointIcon = L.icon({
      iconUrl: '/img/mid.png',
      iconSize: [64, 64],
      iconAnchor: [32, 32],
      className: 'custom-midpoint-icon'
    });

    var leftIcon = L.icon({
      iconUrl: '/img/left.png',
      iconSize: [16, 16],
      iconAnchor: [8, 8],
      className: 'custom-left-icon'
    });

    // Create the map and set its initial view
    var map = L.map('map').setView([startCoordinates[0], startCoordinates[1]], 14);

    // Add a tile layer to the map (OpenStreetMap)
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'Author by Minh.DaoQuang'
    }).addTo(map);

    // Create a GeoJSON layer with fixed color for each feature
    var geojsonLayer = L.geoJSON(shapeCar, {
      style: function (feature) {
        return {
          color: '#000000', // Black stroke
          weight: feature.properties.inline.width,
          opacity: feature.properties.inline.opacity
        };
      },
    }).addTo(map);

    function difference(a, b) {
      return Math.abs((a - b));
    }

    function bearing(p1, p2) {
      var lat1 = p1[1] * Math.PI / 180;
      var lat2 = p2[1] * Math.PI / 180;
      var lon1 = p1[0] * Math.PI / 180;
      var lon2 = p2[0] * Math.PI / 180;

      var y = Math.sin(lon2 - lon1) * Math.cos(lat2);
      var x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);
      var angle = Math.atan2(y, x) * 180 / Math.PI;

      return (angle + 360 + 180) % 360;
    }

    var lastRotationAngle = 0;
    var skipTime = 0;
    shapeCar.features.forEach(function (feature) {
      var latlngs = feature.geometry.coordinates.map(function (coord) {
        return [coord[1], coord[0]];
      });
      latlngs.forEach(function (latlng, index) {
        var nextLatlng = latlngs[index + 1];
        if (nextLatlng) {
          var rotationAngle = bearing(latlng, nextLatlng);
          if ((difference(lastRotationAngle, rotationAngle) > 50) || (skipTime > 20)) {
            skipTime = 0;
            lastRotationAngle = rotationAngle;
            L.marker(latlng, {
              icon: leftIcon,
              rotationAngle: rotationAngle
            }).addTo(map);
          } else {
            // After 5 times in a row, the difference between 2 lines is not over 20, we still print out an arrow sign (for long straight roads)
            skipTime += 1;
          }
        }
      });
    });

    // Add markers for start, stop, middle point
    L.marker([startCoordinates[0], startCoordinates[1]], { icon: startIcon }).addTo(map);
    L.marker([goalCoordinates[0], goalCoordinates[1]], { icon: stopIcon }).addTo(map);
    coordinatesList.forEach((item, index) => {
      if (index % 2 === 0) {
        L.marker([item, coordinatesList[index + 1]], { icon: midpointIcon }).addTo(map);
      }
    });

  </script>
</body>

</html>